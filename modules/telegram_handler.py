# modules/telegram_handler.py
import telebot
from telebot import types
import os
import pytz
from datetime import datetime
from dotenv import load_dotenv
from modules.database import DatabaseManager, Interview, Response

load_dotenv()

class TelegramHandler:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        self.bot = telebot.TeleBot(self.bot_token)
        self.db = DatabaseManager()
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.waiting_for_text_answer = {}
        self.waiting_for_ai_consultation = {}
        
        self.setup_handlers()
    
    def get_moscow_time(self):
        return datetime.now(self.moscow_tz)
    
    def utc_to_moscow(self, utc_datetime):
        if utc_datetime is None:
            return None
        if utc_datetime.tzinfo is None:
            utc_datetime = pytz.utc.localize(utc_datetime)
        return utc_datetime.astimezone(self.moscow_tz)
    
    def format_duration(self, start_time, end_time):
        duration = end_time - start_time
        total_seconds = int(duration.total_seconds())
        if total_seconds < 0:
            return "0 –º–∏–Ω 0 —Å–µ–∫"
        minutes = total_seconds // 60
        seconds = total_seconds % 60
        return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    
    def send_long_message(self, chat_id, text, parse_mode=None, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        MAX_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if len(text) <= MAX_LENGTH:
            self.bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∞–±–∑–∞—Ü–∞–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            parts = []
            current_part = ""
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
            paragraphs = text.split('\n\n')
            
            for paragraph in paragraphs:
                if len(current_part + paragraph) <= MAX_LENGTH:
                    current_part += paragraph + '\n\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = paragraph + '\n\n'
                    else:
                        # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–∏–Ω –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                        while len(paragraph) > MAX_LENGTH:
                            parts.append(paragraph[:MAX_LENGTH])
                            paragraph = paragraph[MAX_LENGTH:]
                        current_part = paragraph + '\n\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            for i, part in enumerate(parts):
                if i == 0:
                    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
                    self.bot.send_message(chat_id, part, parse_mode=parse_mode)
                elif i == len(parts) - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    self.bot.send_message(chat_id, f"**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:**\n\n{part}", 
                                        parse_mode=parse_mode, reply_markup=reply_markup)
                else:
                    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏
                    self.bot.send_message(chat_id, f"**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:**\n\n{part}", parse_mode=parse_mode)
    
    def get_gigachat_response(self, user_query, question_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ GigaChat API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            session = self.db.get_session()
            from modules.database import Question
            question = session.query(Question).filter(Question.id == question_id).first()
            
            if not question:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GigaChatHandler
            from modules.gigachat_handler import GigaChatHandler
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ GigaChat
            giga_handler = GigaChatHandler()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
            question_context = {
                'question_text': question.text,
                'market_context': question.market_context,
                'option_a': question.option_a,
                'option_a_details': question.option_a_details,
                'option_b': question.option_b,
                'option_b_details': question.option_b_details
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
            ai_response = giga_handler.get_financial_advice(user_query, question_context)
            
            return f"üí° **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è GigaChat:**\n\n{ai_response}"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat: {e}")
            return f"""
‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.

–í–∞—à –≤–æ–ø—Ä–æ—Å: "{user_query}"

**–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É
‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å - –∏–Ω—Ñ–ª—è—Ü–∏—è)  
‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–∫—Ç–∏–≤–æ–≤

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.
"""
    
    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start_interview(message):
            user_id = str(message.from_user.id)
            username = message.from_user.username or message.from_user.first_name
            session = self.db.get_session()

            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if user_id in self.waiting_for_text_answer:
                del self.waiting_for_text_answer[user_id]
            if user_id in self.waiting_for_ai_consultation:
                del self.waiting_for_ai_consultation[user_id]

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_interviews = session.query(Interview).filter(
                Interview.user_id == user_id,
                Interview.status == 'active'
            ).all()
            for interview in active_interviews:
                interview.status = 'restarted'
                interview.completed_at = datetime.utcnow()
            session.commit()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            new_interview = Interview(
                user_id=user_id,
                username=username,
                started_at=datetime.utcnow()
            )
            session.add(new_interview)
            session.commit()

            welcome_text = f"""
üé§ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é!**

–ü—Ä–∏–≤–µ—Ç, {username}! –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ –≤—ã–±–æ—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–æ–º: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ê –∏–ª–∏ –ë
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç
‚Ä¢ üí° **–ú–æ–∂–µ—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º GigaChat –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É**
‚Ä¢ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
/end - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
/status - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
/help - —Å–ø—Ä–∞–≤–∫–∞

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
            """
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data="get_question"))
            self.bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='Markdown')
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "get_question")
        def get_question_callback(call):
            user_id = str(call.from_user.id)
            self.send_next_question(call.message.chat.id, user_id)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('choose_'))
        def handle_choice(call):
            user_id = str(call.from_user.id)
            choice_data = call.data.split('_')
            option = choice_data[1]  # A –∏–ª–∏ B
            question_id = int(choice_data[2])
            
            session = self.db.get_session()
            interview = session.query(Interview).filter(
                Interview.user_id == user_id,
                Interview.status == 'active'
            ).first()
            
            if interview:
                existing_response = session.query(Response).filter(
                    Response.interview_id == interview.id,
                    Response.question_id == question_id
                ).first()
                
                if existing_response:
                    self.bot.send_message(call.message.chat.id, 
                        "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!")
                    return
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                from modules.database import AIConsultation
                consultations_count = session.query(AIConsultation).filter(
                    AIConsultation.interview_id == interview.id,
                    AIConsultation.question_id == question_id
                ).count()
                
                response = Response(
                    interview_id=interview.id,
                    question_id=question_id,
                    selected_option=option,
                    answer_text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç {option}",
                    consultations_count=consultations_count,
                    timestamp=datetime.utcnow()
                )
                session.add(response)
                session.commit()
                
                from modules.database import Question
                question = session.query(Question).filter(Question.id == question_id).first()
                if question:
                    chosen_product = question.option_a if option == 'A' else question.option_b
                    self.bot.send_message(call.message.chat.id, 
                        f"‚úÖ **–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: **{chosen_product}**", 
                        parse_mode='Markdown')
                
                self.send_next_question(call.message.chat.id, user_id)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('skip_'))
        def handle_skip(call):
            user_id = str(call.from_user.id)
            question_id = int(call.data.split('_')[1])
            
            session = self.db.get_session()
            interview = session.query(Interview).filter(
                Interview.user_id == user_id,
                Interview.status == 'active'
            ).first()
            
            if interview:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
                if user_id in self.waiting_for_text_answer:
                    del self.waiting_for_text_answer[user_id]
                if user_id in self.waiting_for_ai_consultation:
                    del self.waiting_for_ai_consultation[user_id]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                response = Response(
                    interview_id=interview.id,
                    question_id=question_id,
                    answer_text="[–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω]",
                    timestamp=datetime.utcnow()
                )
                session.add(response)
                session.commit()
                
                self.bot.send_message(call.message.chat.id, "‚è≠ –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")
                self.send_next_question(call.message.chat.id, user_id)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('consult_'))
        def handle_consultation_request(call):
            user_id = str(call.from_user.id)
            question_id = int(call.data.split('_')[1])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            self.waiting_for_ai_consultation[user_id] = question_id
            
            consult_text = """
üí° **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å GigaChat**

–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∏ —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò GigaChat –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ?"
‚Ä¢ "–ß—Ç–æ –ª—É—á—à–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"
‚Ä¢ "–ö–∞–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–∞?"
‚Ä¢ "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç —Ä–∏—Å–∫–æ–≤?"
‚Ä¢ "–†–∞—Å—Å—á–∏—Ç–∞–π —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"

üìù **–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**
            """
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data=f"cancel_consult_{question_id}"))
            self.bot.send_message(call.message.chat.id, consult_text, reply_markup=markup, parse_mode='Markdown')
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_consult_'))
        def cancel_consultation(call):
            user_id = str(call.from_user.id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if user_id in self.waiting_for_ai_consultation:
                del self.waiting_for_ai_consultation[user_id]
            
            self.bot.send_message(call.message.chat.id, 
                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "end_interview")
        def confirm_end_interview(call):
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="confirm_end"),
                types.InlineKeyboardButton("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="cancel_end")
            )
            self.bot.send_message(
                call.message.chat.id,
                "ü§î **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é?",
                reply_markup=markup,
                parse_mode='Markdown'
            )
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "confirm_end")
        def handle_confirm_end(call):
            user_id = str(call.from_user.id)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if user_id in self.waiting_for_text_answer:
                del self.waiting_for_text_answer[user_id]
            if user_id in self.waiting_for_ai_consultation:
                del self.waiting_for_ai_consultation[user_id]
            
            session = self.db.get_session()
            interview = session.query(Interview).filter(
                Interview.user_id == user_id,
                Interview.status == 'active'
            ).first()
            
            if interview:
                completed_at = datetime.utcnow()
                interview.status = 'completed'
                interview.completed_at = completed_at
                session.commit()
                
                responses_count = session.query(Response).filter(
                    Response.interview_id == interview.id
                ).count()
                
                choice_a_count = session.query(Response).filter(
                    Response.interview_id == interview.id,
                    Response.selected_option == 'A'
                ).count()
                
                choice_b_count = session.query(Response).filter(
                    Response.interview_id == interview.id,
                    Response.selected_option == 'B'
                ).count()
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                from modules.database import AIConsultation
                consultations_count = session.query(AIConsultation).filter(
                    AIConsultation.interview_id == interview.id
                ).count()
                
                started_msk = self.utc_to_moscow(interview.started_at)
                completed_msk = self.utc_to_moscow(completed_at)
                duration_str = self.format_duration(interview.started_at, completed_at)
                
                from modules.database import Question
                total_questions = session.query(Question).filter(Question.is_active == True).count()
                
                stats_text = f"""
üéâ **–ò–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üìù **–û—Ç–≤–µ—Ç—ã:**
‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {responses_count} –∏–∑ {total_questions}
‚Ä¢ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ê: {choice_a_count}
‚Ä¢ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ë: {choice_b_count}

üí° **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å GigaChat:**
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {consultations_count}

‚è± **–í—Ä–µ–º—è (–ú–°–ö):**
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}
‚Ä¢ –ù–∞—á–∞—Ç–æ: {started_msk.strftime('%d.%m.%Y %H:%M:%S')}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_msk.strftime('%d.%m.%Y %H:%M:%S')}

üôè **–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏!**

–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å GigaChat –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ª—é–¥–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.

---
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
                """
                self.bot.send_message(call.message.chat.id, stats_text, parse_mode='Markdown')
            else:
                self.bot.send_message(call.message.chat.id, "‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "cancel_end")
        def handle_cancel_end(call):
            self.bot.send_message(
                call.message.chat.id,
                "üëç **–•–æ—Ä–æ—à–æ!**\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Å –ø–æ–º–æ—â—å—é /start",
                parse_mode='Markdown'
            )
        
        @self.bot.message_handler(commands=['end'])
        def end_command(message):
            user_id = str(message.from_user.id)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if user_id in self.waiting_for_text_answer:
                del self.waiting_for_text_answer[user_id]
            if user_id in self.waiting_for_ai_consultation:
                del self.waiting_for_ai_consultation[user_id]
            
            session = self.db.get_session()
            interview = session.query(Interview).filter(
                Interview.user_id == user_id,
                Interview.status == 'active'
            ).first()
            
            if interview:
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="confirm_end"),
                    types.InlineKeyboardButton("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="cancel_end")
                )
                self.bot.send_message(
                    message.chat.id,
                    "ü§î **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é?",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
        
        @self.bot.message_handler(commands=['status'])
        def status_command(message):
            user_id = str(message.from_user.id)
            session = self.db.get_session()
            interview = session.query(Interview).filter(
                Interview.user_id == user_id,
                Interview.status == 'active'
            ).first()
            
            if interview:
                answered, total = self.db.get_interview_progress(interview.id)
                started_msk = self.utc_to_moscow(interview.started_at)
                current_time = datetime.utcnow()
                duration_str = self.format_duration(interview.started_at, current_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
                waiting_status = ""
                if user_id in self.waiting_for_text_answer:
                    waiting_status += "\n‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
                if user_id in self.waiting_for_ai_consultation:
                    waiting_status += "\nüí° –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –¥–ª—è GigaChat"
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                from modules.database import AIConsultation
                consultations_count = session.query(AIConsultation).filter(
                    AIConsultation.interview_id == interview.id
                ).count()
                
                status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é:**

üü¢ **–ò–Ω—Ç–µ—Ä–≤—å—é –∞–∫—Ç–∏–≤–Ω–æ**
üìù –ü—Ä–æ–≥—Ä–µ—Å—Å: {answered}/{total} –≤–æ–ø—Ä–æ—Å–æ–≤
üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å GigaChat: {consultations_count}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}
üÜî ID –∏–Ω—Ç–µ—Ä–≤—å—é: {interview.id}
üìÖ –ù–∞—á–∞—Ç–æ: {started_msk.strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö){waiting_status}

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end
                """
            else:
                status_text = """
üìä **–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é:**

üî¥ **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é**

–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
                """
            self.bot.send_message(message.chat.id, status_text, parse_mode='Markdown')
        
        @self.bot.message_handler(commands=['help'])
        def help_command(message):
            help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
/end - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
/status - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–Ω—Ç–µ—Ä–≤—å—é:**
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–æ–º: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ê –∏–ª–∏ –ë
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ üí° **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å GigaChat:** –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è

**–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å GigaChat:**
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ª—é–±–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
‚Ä¢ GigaChat —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚Ä¢ –í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é:**
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /end –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é" –∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –¥–≤–∞–∂–¥—ã
‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            """
            self.bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
        
        # –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å GigaChat)
        @self.bot.message_handler(func=lambda message: True)
        def handle_text_message(message):
            user_id = str(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            if user_id in self.waiting_for_text_answer:
                question_id = self.waiting_for_text_answer[user_id]
                
                session = self.db.get_session()
                interview = session.query(Interview).filter(
                    Interview.user_id == user_id,
                    Interview.status == 'active'
                ).first()
                
                if interview:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
                    existing_response = session.query(Response).filter(
                        Response.interview_id == interview.id,
                        Response.question_id == question_id
                    ).first()
                    
                    if existing_response:
                        self.bot.send_message(message.chat.id, 
                            "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!")
                        del self.waiting_for_text_answer[user_id]
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    response = Response(
                        interview_id=interview.id,
                        question_id=question_id,
                        answer_text=message.text,
                        timestamp=datetime.utcnow()
                    )
                    session.add(response)
                    session.commit()
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
                    del self.waiting_for_text_answer[user_id]
                    
                    self.bot.send_message(message.chat.id, 
                        f"‚úÖ **–í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                        f"–û—Ç–≤–µ—Ç: _{message.text}_", 
                        parse_mode='Markdown')
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    self.send_next_question(message.chat.id, user_id)
                else:
                    # –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    del self.waiting_for_text_answer[user_id]
                    self.bot.send_message(message.chat.id, 
                        "‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è GigaChat-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            elif user_id in self.waiting_for_ai_consultation:
                question_id = self.waiting_for_ai_consultation[user_id]
                user_query = message.text
                
                session = self.db.get_session()
                interview = session.query(Interview).filter(
                    Interview.user_id == user_id,
                    Interview.status == 'active'
                ).first()
                
                if interview:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    processing_msg = self.bot.send_message(message.chat.id, 
                        "ü§î –û–±—Ä–∞—â–∞—é—Å—å –∫ GigaChat, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
                    ai_response = self.get_gigachat_response(user_query, question_id)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    try:
                        consultation_id = self.db.save_consultation(
                            interview_id=interview.id,
                            question_id=question_id,
                            user_query=user_query,
                            ai_response=ai_response,
                            consultation_type="gigachat_advice"
                        )
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                        try:
                            self.bot.delete_message(message.chat.id, processing_msg.message_id)
                        except:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        self.send_long_message(message.chat.id, ai_response, parse_mode='Markdown')
                        
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                        markup = types.InlineKeyboardMarkup()
                        markup.row(
                            types.InlineKeyboardButton("üÖ∞Ô∏è –í—ã–±—Ä–∞—Ç—å –ê", callback_data=f"choose_A_{question_id}"),
                            types.InlineKeyboardButton("üÖ±Ô∏è –í—ã–±—Ä–∞—Ç—å –ë", callback_data=f"choose_B_{question_id}")
                        )
                        markup.add(types.InlineKeyboardButton("üí° –ï—â–µ –≤–æ–ø—Ä–æ—Å –∫ GigaChat", callback_data=f"consult_{question_id}"))
                        
                        self.bot.send_message(message.chat.id, 
                            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:",
                            reply_markup=markup)
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                        del self.waiting_for_ai_consultation[user_id]
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
                        try:
                            self.bot.delete_message(message.chat.id, processing_msg.message_id)
                        except:
                            pass
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –æ—à–∏–±–æ–∫
                        self.send_long_message(message.chat.id, 
                            f"{ai_response}\n\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                        del self.waiting_for_ai_consultation[user_id]
                else:
                    # –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    del self.waiting_for_ai_consultation[user_id]
                    self.bot.send_message(message.chat.id, 
                        "‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                self.bot.send_message(message.chat.id, 
                    "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é.")
    
    def send_next_question(self, chat_id, user_id):
        session = self.db.get_session()
        interview = session.query(Interview).filter(
            Interview.user_id == user_id,
            Interview.status == 'active'
        ).first()
        
        if not interview:
            self.bot.send_message(chat_id, "‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        question = self.db.get_next_question_for_interview(interview.id)
        
        if question:
            answered, total = self.db.get_interview_progress(interview.id)
            progress_text = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {answered}/{total} –≤–æ–ø—Ä–æ—Å–æ–≤"
            
            if question.question_type == 'choice':
                # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º
                question_text = f"""
{progress_text}

‚ùì **–í–æ–ø—Ä–æ—Å {answered + 1}:**
{question.text}

üìä **–†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:**
{question.market_context}

**–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞:**

üÖ∞Ô∏è **–ü—Ä–æ–¥—É–∫—Ç –ê:** {question.option_a}
_{question.option_a_details}_

üÖ±Ô∏è **–ü—Ä–æ–¥—É–∫—Ç –ë:** {question.option_b}
_{question.option_b_details}_
                """
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("üÖ∞Ô∏è –í—ã–±—Ä–∞—Ç—å –ê", callback_data=f"choose_A_{question.id}"),
                    types.InlineKeyboardButton("üÖ±Ô∏è –í—ã–±—Ä–∞—Ç—å –ë", callback_data=f"choose_B_{question.id}")
                )
                markup.add(types.InlineKeyboardButton("üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å GigaChat", callback_data=f"consult_{question.id}"))
                self.bot.send_message(chat_id, question_text, reply_markup=markup, parse_mode='Markdown')
                
            elif question.question_type == 'text':
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                question_text = f"""
{progress_text}

‚ùì **–í–æ–ø—Ä–æ—Å {answered + 1}:**
{question.text}

üìù **–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**
                """
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                self.waiting_for_text_answer[user_id] = question.id
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"skip_{question.id}"))
                self.bot.send_message(chat_id, question_text, reply_markup=markup, parse_mode='Markdown')
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
            answered, total = self.db.get_interview_progress(interview.id)
            end_text = f"""
üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ {total} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –Ω–∞—à–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –∏–Ω—Ç–µ—Ä–≤—å—é!

üìä **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {answered}/{total}**

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å GigaChat.
            """
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data="end_interview"))
            self.bot.send_message(chat_id, end_text, reply_markup=markup, parse_mode='Markdown')
    
    def start_polling(self):
        print("ü§ñ Telegram –±–æ—Ç —Å GigaChat –∑–∞–ø—É—â–µ–Ω!")
        try:
            self.bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ infinity_polling: {e}")
            raise
