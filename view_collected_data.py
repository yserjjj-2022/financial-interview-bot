# view_collected_data.py
from modules.database import DatabaseManager, Interview, Response, Question, AIConsultation
from datetime import datetime
import pytz
import os

def view_all_data():
    print("üìä –ê–ù–ê–õ–ò–ó –°–û–ë–†–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    db = DatabaseManager()
    session = db.get_session()
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    def utc_to_moscow(utc_dt):
        if utc_dt and utc_dt.tzinfo is None:
            utc_dt = pytz.utc.localize(utc_dt)
        return utc_dt.astimezone(moscow_tz) if utc_dt else None
    
    # 1. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\nüî¢ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    
    total_interviews = session.query(Interview).count()
    completed_interviews = session.query(Interview).filter(Interview.status == 'completed').count()
    active_interviews = session.query(Interview).filter(Interview.status == 'active').count()
    total_responses = session.query(Response).count()
    total_consultations = session.query(AIConsultation).count()
    total_questions = session.query(Question).filter(Question.is_active == True).count()
    
    print(f"   –í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {total_interviews}")
    print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_interviews}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_interviews}")
    print(f"   –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}")
    print(f"   –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å –ò–ò: {total_consultations}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    
    # 2. –î–ï–¢–ê–õ–ò –ò–ù–¢–ï–†–í–¨–Æ
    print("\nüé§ –î–ï–¢–ê–õ–ò –í–°–ï–• –ò–ù–¢–ï–†–í–¨–Æ:")
    interviews = session.query(Interview).order_by(Interview.started_at.desc()).all()
    
    for i, interview in enumerate(interviews, 1):
        started_msk = utc_to_moscow(interview.started_at)
        completed_msk = utc_to_moscow(interview.completed_at) if interview.completed_at else None
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
        responses_count = session.query(Response).filter(Response.interview_id == interview.id).count()
        consultations_count = session.query(AIConsultation).filter(AIConsultation.interview_id == interview.id).count()
        
        duration = ""
        if interview.completed_at:
            dur = interview.completed_at - interview.started_at
            minutes = int(dur.total_seconds() // 60)
            seconds = int(dur.total_seconds() % 60)
            duration = f"{minutes}–º {seconds}—Å"
        
        print(f"\n   {i}. ID: {interview.id} | User: {interview.user_id}")
        print(f"      Username: {interview.username}")
        print(f"      –°—Ç–∞—Ç—É—Å: {interview.status}")
        print(f"      –ù–∞—á–∞—Ç–æ: {started_msk.strftime('%d.%m.%Y %H:%M:%S') if started_msk else 'N/A'}")
        print(f"      –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_msk.strftime('%d.%m.%Y %H:%M:%S') if completed_msk else '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}")
        print(f"      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration if duration else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
        print(f"      –û—Ç–≤–µ—Ç–æ–≤: {responses_count}/{total_questions}")
        print(f"      –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {consultations_count}")
    
    # 3. –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í –ù–ê –í–û–ü–†–û–°–´
    print("\nüìù –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í –ü–û –í–û–ü–†–û–°–ê–ú:")
    questions = session.query(Question).filter(Question.is_active == True).order_by(Question.id).all()
    
    for question in questions:
        responses = session.query(Response).filter(Response.question_id == question.id).all()
        
        if question.question_type == 'choice':
            choice_a = len([r for r in responses if r.selected_option == 'A'])
            choice_b = len([r for r in responses if r.selected_option == 'B'])
            
            print(f"\n   –í–æ–ø—Ä–æ—Å {question.id}: {question.text[:60]}...")
            print(f"   –¢–∏–ø: {question.question_type}")
            print(f"   –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(responses)}")
            print(f"   –í—ã–±–æ—Ä –ê ({question.option_a}): {choice_a}")
            print(f"   –í—ã–±–æ—Ä –ë ({question.option_b}): {choice_b}")
            
            if len(responses) > 0:
                percent_a = (choice_a / len(responses)) * 100
                percent_b = (choice_b / len(responses)) * 100
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: –ê={percent_a:.1f}% | –ë={percent_b:.1f}%")
        
        elif question.question_type == 'text':
            print(f"\n   –í–æ–ø—Ä–æ—Å {question.id}: {question.text[:60]}...")
            print(f"   –¢–∏–ø: {question.question_type}")
            print(f"   –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(responses)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            for j, response in enumerate(responses[:3], 1):
                if response.answer_text and response.answer_text != "[–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω]":
                    print(f"     –û—Ç–≤–µ—Ç {j}: {response.answer_text[:100]}...")
    
    # 4. –ê–ù–ê–õ–ò–ó –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô –° –ò–ò
    print("\nüí° –ê–ù–ê–õ–ò–ó –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô –° –ò–ò:")
    consultations = session.query(AIConsultation).order_by(AIConsultation.timestamp.desc()).all()
    
    if consultations:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        consultation_types = {}
        for cons in consultations:
            cons_type = cons.consultation_type or 'unknown'
            if cons_type not in consultation_types:
                consultation_types[cons_type] = 0
            consultation_types[cons_type] += 1
        
        print(f"   –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {len(consultations)}")
        print("   –ü–æ —Ç–∏–ø–∞–º:")
        for cons_type, count in consultation_types.items():
            print(f"     {cons_type}: {count}")
        
        print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:")
        for i, cons in enumerate(consultations[:5], 1):
            timestamp_msk = utc_to_moscow(cons.timestamp)
            question = session.query(Question).filter(Question.id == cons.question_id).first()
            
            print(f"\n     {i}. –í—Ä–µ–º—è: {timestamp_msk.strftime('%d.%m %H:%M') if timestamp_msk else 'N/A'}")
            print(f"        –í–æ–ø—Ä–æ—Å –∫ –ò–ò: {cons.user_query[:80]}...")
            print(f"        –ö –≤–æ–ø—Ä–æ—Å—É: {question.text[:50] if question else 'N/A'}...")
            print(f"        –û—Ç–≤–µ—Ç –ò–ò: {cons.ai_response[:100]}...")
    else:
        print("   –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
    
    # 5. –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
    print("\nüì§ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•:")
    print("   –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python export_data.py")
    print("   –§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: output/")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if os.path.exists('output'):
        csv_files = [f for f in os.listdir('output') if f.endswith('.csv')]
        if csv_files:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(csv_files)} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            for file in sorted(csv_files)[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                print(f"     - {file}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    view_all_data()
